AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Lambda sending emails

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CustomDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The default domain that is used as from_address
    Default: CustomDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: email
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

  Conditions:
    WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Globals:
  Function:
    Timeout: 900
    MemorySize: 1798
    Runtime: java11

Resources:
  DlrNvaEmailServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [ lambda.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: writeLog
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
        - PolicyName: sendMail
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"

  EmailGatewayAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      EndpointConfiguration:
        Type: REGIONAL
      MethodSettings:
        - ResourcePath: /email
          HttpMethod: POST
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml

  DlrNvaEmailServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: email-service
      Handler: no.sikt.nva.email.EmailRequestHandler::handleRequest
      Role: !GetAtt DlrNvaEmailServiceRole.Arn
      Runtime: java11
      MemorySize: 1798
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          DEFAULT_FROM_ADDRESS: !Sub "no-reply@${CustomDomain}"
      Events:
        SendEmailRequest:
          Type: Api
          Properties:
            RestApiId: !Ref EmailGatewayAPI
            Method: post
            Path: /email

  EmailServiceBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref EmailGatewayAPI
      Stage: !Ref EmailGatewayAPI.Stage

# Set up automatically verified from_address domain: This will only work for Route 53 domains.
# Non route 53 domains needs manually updating certificates.
  VerifiedFromSenderForSimpleEmail:
    Type: AWS::SES::EmailIdentity
    Properties:
      DkimAttributes:
        SigningEnabled: true
      DkimSigningAttributes:
        NextSigningKeyLength: 'RSA_2048_BIT'
      EmailIdentity: !Ref CustomDomain
      FeedbackAttributes:
        EmailForwardingEnabled: true